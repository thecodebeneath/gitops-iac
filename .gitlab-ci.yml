stages:
  - validate
  - build
  - deploy
  - cleanup

variables:
  AWS_ROLE_ARN: "arn:aws:iam::$ACCOUNT_ID:role/codebeneath-lab-gitlab-runner-role"
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  DESTROY_INFRA:
    description: "Optional action to destroy managed resources"
    value: "false"

default:
  image: 
    name: $ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/codebeneath/hashicorp/terraform-awscli:1.0
    entrypoint: [""]
  tags:
    - tf
  id_tokens: # Request an OIDC token
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.codebeneath-labs.org
  before_script:
    - >
      aws_sts_output=$(aws sts assume-role-with-web-identity
      --role-arn ${AWS_ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text)
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $aws_sts_output)
    - aws sts get-caller-identity
    - cd ${TF_ROOT}
    - terraform --version
    - terraform init -input=false

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: build
  script:
    - terraform plan -out=tfplan -input=false
  artifacts:
    paths:
      - ${TF_ROOT}/tfplan
    access: 'developer'
    expire_in: "5 days"

apply:
  stage: deploy
  dependencies:
    - plan
  script:
    - terraform apply -input=false tfplan
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH     # Apply only on default branch
      when: manual                                    # Manual trigger for prod changes in best practice
    - if: $CI_COMMIT_BRANCH =~ /^env\//
      when: on_success

destroy:
  stage: cleanup
  dependencies:
    - plan
  script:
    - terraform destroy -input=false -auto-approve
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $DESTROY_INFRA == "true"   # Requires explicit var value
      when: manual    
